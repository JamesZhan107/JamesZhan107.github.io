<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James&#39;s Blog</title>
  
  <subtitle>Winter is coming, Hope is everything!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jameszhan.cf/"/>
  <updated>2019-01-21T14:16:14.097Z</updated>
  <id>http://jameszhan.cf/</id>
  
  <author>
    <name>詹姆斯·文</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java web架构介绍</title>
    <link href="http://jameszhan.cf/2019/01/21/Java-web%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
    <id>http://jameszhan.cf/2019/01/21/Java-web架构介绍/</id>
    <published>2019-01-21T13:40:57.000Z</published>
    <updated>2019-01-21T14:16:14.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常规的J2EE三层架构"><a href="#常规的J2EE三层架构" class="headerlink" title="常规的J2EE三层架构"></a>常规的J2EE三层架构</h1><p><img src="https://img-blog.csdnimg.cn/20181108110835831.png" width="600" height="400"></p><h1 id="Alibaba提倡的分层结构"><a href="#Alibaba提倡的分层结构" class="headerlink" title="Alibaba提倡的分层结构"></a>Alibaba提倡的分层结构</h1><p><img src="https://img-blog.csdnimg.cn/20181108110624498.jpg" width="600" height="400"></p><h2 id="Web-层"><a href="#Web-层" class="headerlink" title="Web 层"></a>Web 层</h2><p>主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</p><h2 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h2><p>相对具体的业务逻辑服务层。</p><h2 id="Manager-层"><a href="#Manager-层" class="headerlink" title="Manager 层"></a>Manager 层</h2><p>通用业务处理层，它有如下特征： 1） 对第三方平台封装的层，预处理返回结果及转化异常信息； 2） 对 Service 层通用能力的下沉，如缓存方案、中间件通用处理； 3） 与 DAO 层交互，对多个 DAO 的组合复用。</p><h2 id="DAO-层"><a href="#DAO-层" class="headerlink" title="DAO 层"></a>DAO 层</h2><p>数据访问层，与底层 MySQL、Oracle、Hbase 等进行数据交互。</p><h2 id="开放接口层"><a href="#开放接口层" class="headerlink" title="开放接口层"></a>开放接口层</h2><p>可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；进行网关安全控制、流量控制等。</p><h2 id="终端显示层"><a href="#终端显示层" class="headerlink" title="终端显示层"></a>终端显示层</h2><p>各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</p><h2 id="外部接口或第三方平台"><a href="#外部接口或第三方平台" class="headerlink" title="外部接口或第三方平台"></a>外部接口或第三方平台</h2><p>包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</p><h1 id="MVC的结构"><a href="#MVC的结构" class="headerlink" title="MVC的结构"></a>MVC的结构</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20181108110215665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODUzMjE1OQ==,size_1,color_FFFFFF,t_70" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="SpringMVC的结构及工作原理"><a href="#SpringMVC的结构及工作原理" class="headerlink" title="SpringMVC的结构及工作原理"></a>SpringMVC的结构及工作原理</h1><p><img src="https://img-blog.csdnimg.cn/20181108114234197.png" width="600" height="400"></p><h2 id="工作流程详解"><a href="#工作流程详解" class="headerlink" title="工作流程详解"></a>工作流程详解</h2><ol><li>客户端的所有请求都交给前端控制器DispatcherServlet来处理，它会负责调用系统的其他模块来真正处理用户的请求。 </li><li>DispatcherServlet收到请求后，将根据请求的信息（包括URL、HTTP协议方法、请求头、请求参数、Cookie等）以及HandlerMapping的配置找到处理该请求的Handler（任何一个对象都可以作为请求的Handler）。 </li><li>在这个地方Spring会通过HandlerAdapter对该处理进行封装。 </li><li>HandlerAdapter是一个适配器，它用统一的接口对各种Handler中的方法进行调用。 </li><li>Handler完成对用户请求的处理后，会返回一个ModelAndView对象给DispatcherServlet，ModelAndView顾名思义，包含了数据模型以及相应的视图的信息。 </li><li>ModelAndView的视图是逻辑视图，DispatcherServlet还要借助ViewResolver完成从逻辑视图到真实视图对象的解析工作。 </li><li>当得到真正的视图对象后，DispatcherServlet会利用视图对象对模型数据进行渲染。 </li><li>客户端得到响应，可能是一个普通的HTML页面，也可以是XML或JSON字符串，还可以是一张图片或者一个PDF文件。</li></ol><h2 id="组件及其作用"><a href="#组件及其作用" class="headerlink" title="组件及其作用"></a>组件及其作用</h2><ol><li>前端控制器 (DispatcherServlet)<br>接收请求，响应结果，相当于转发器，中央处理器。负责调用系统的其他模块来真正处理用户的请求。 有了DispatcherServlet减少了其他组件之间的耦合度</li><li>处理器映射器 (HandlerMapping)<br>作用：根据请求的 url 查找 Handler</li><li>处理器 (Handler)<br>注意：编写 Handler 时按照 HandlerAdapter 的要求去做，这样适配器才可以去正确执行 Handler处理器适配器 (HandlerAdapter)<br>作用：按照特定规则（HandlerAdapter要求的规则）执行Handler。</li><li>视图解析器 (ViewResolver)<br>作用：进行视图解析，根据逻辑视图解析成真正的视图 (View)</li><li>视图 (View)<br>View 是一个接口实现类支持不同的 View 类型（jsp,pdf等等）</li></ol><blockquote><p>进行SpringMVC开发时，程序员只需编写处理器和视图。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常规的J2EE三层架构&quot;&gt;&lt;a href=&quot;#常规的J2EE三层架构&quot; class=&quot;headerlink&quot; title=&quot;常规的J2EE三层架构&quot;&gt;&lt;/a&gt;常规的J2EE三层架构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg
      
    
    </summary>
    
      <category term="后端技术" scheme="http://jameszhan.cf/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://jameszhan.cf/tags/java/"/>
    
      <category term="web" scheme="http://jameszhan.cf/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Markdown学习笔记</title>
    <link href="http://jameszhan.cf/2019/01/21/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://jameszhan.cf/2019/01/21/Markdown学习笔记/</id>
    <published>2019-01-21T03:43:51.000Z</published>
    <updated>2019-01-21T13:27:43.577Z</updated>
    
    <content type="html"><![CDATA[<p>今天大概学习了一下Markdown的语法，感觉也不是那么难，用起来都比较方便。作为一门编辑类工具，相信是越用越熟，以后多多练习，必能熟练掌握。</p><p>那么就先简单介绍一些常用的语法，之后有需求再去更新。</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>标题有以下六种</p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><hr><h1 id="文字格式"><a href="#文字格式" class="headerlink" title="文字格式"></a>文字格式</h1><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><pre><code>**这是文字粗体格式***这是文字斜体格式*&lt;del&gt;在文字上添加删除线 或~~在文字上添加删除线~~`在文字下增加底纹`</code></pre><p><strong>这是文字粗体格式</strong></p><p><em>这是文字斜体格式</em></p><p><del>在文字上添加删除线<br>或<br><del>在文字上添加删除线</del></del></p><p><code>在文字下增加底纹</code></p><hr><h2 id="自定义字体、字号和颜色"><a href="#自定义字体、字号和颜色" class="headerlink" title="自定义字体、字号和颜色"></a>自定义字体、字号和颜色</h2><pre><code>&lt;font color=#0099ff size=6 face=&quot;黑体&quot;&gt;颜色，字号，字体&lt;/font&gt;</code></pre><font color="red" size="6" face="黑体">颜色，字号，字体</font><hr><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><pre><code>[文本内容]（链接地址）</code></pre><p><a href="www.baidu.com">百度一下</a></p><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="原始版"><a href="#原始版" class="headerlink" title="原始版"></a>原始版</h2><p>此种方式无法改变图片的大小</p><pre><code>![图片的描述](图片的链接地址)</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1548079776613&di=30d8bfafe8464ea60d3faae9c83ba992&imgtype=0&src=http%3A%2F%2F06.imgmini.eastday.com%2Fmobile%2F20180609%2F20180609000241_a3be888839a2b04ded0a1e3705c466cf_3.jpeg" alt="最爱的詹姆斯" title="">                </div>                <div class="image-caption">最爱的詹姆斯</div>            </figure><h2 id="升级版"><a href="#升级版" class="headerlink" title="升级版"></a>升级版</h2><p>此种方式可自定义图片大小</p><pre><code>&lt;img src=&quot;./xxx.png&quot; width = &quot;300&quot; height = &quot;200&quot; alt=&quot;图片名称&quot;/&gt;</code></pre><p> <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1548079776613&di=30d8bfafe8464ea60d3faae9c83ba992&imgtype=0&src=http%3A%2F%2F06.imgmini.eastday.com%2Fmobile%2F20180609%2F20180609000241_a3be888839a2b04ded0a1e3705c466cf_3.jpeg" width="300" height="300" alt="最爱的詹姆斯"></p><blockquote><p>如果需要居中的话只要在语句外面包围div标签即可</p></blockquote><pre><code>&lt;div  align=&quot;center&quot;&gt;    ...&lt;/div&gt;</code></pre><hr><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>在文本内容之前加上 &gt;（大于号），即可将文本变成引用文本</p><pre><code>&gt;这是引用部分</code></pre><blockquote><p>这是引用部分</p></blockquote><hr><h1 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h1><p>前面用到了很多代码框，即每个大框都是代码框。有两种办法：1.一对“上三点”包裹代码 2.代码前加四个空格（一个tab键）。两种语法的显示在不同编辑器下可能会有些许区别，前者会有标号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">System.out.println(&quot;这就是代码框&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>public void test(){    System.out.println(&quot;这就是代码框&quot;)}</code></pre><hr><h1 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h1><p>前面也用到了许多分割线，三个小短线即可表示。</p><pre><code>--- 就是这小三只</code></pre><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表项目标记通常放在最左边，项目标记后面要接一个字符的空格</p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用星号、加号或是减号作为列表标记</p><pre><code>- 第一- 第二- 第三</code></pre><ul><li>第一</li><li>第二</li><li>第三</li></ul><hr><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>使用数字接着一个英文句点</p><pre><code>1. Red2. Green3. Blue</code></pre><ol><li>Red</li><li>Green</li><li>Blue</li></ol><hr><h2 id="待办列表"><a href="#待办列表" class="headerlink" title="待办列表"></a>待办列表</h2><p>表示列表是否勾选状态（注意：[ ] 前后都要有空格）</p><pre><code>- [ ] 不勾选- [x] 勾选</code></pre><ul><li style="list-style: none"><input type="checkbox"> 不勾选</li><li style="list-style: none"><input type="checkbox" checked> 勾选</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天大概学习了一下Markdown的语法，感觉也不是那么难，用起来都比较方便。作为一门编辑类工具，相信是越用越熟，以后多多练习，必能熟练掌握。&lt;/p&gt;
&lt;p&gt;那么就先简单介绍一些常用的语法，之后有需求再去更新。&lt;/p&gt;
&lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; c
      
    
    </summary>
    
      <category term="语言语法" scheme="http://jameszhan.cf/categories/%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="Markdown" scheme="http://jameszhan.cf/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>个人博客处女作</title>
    <link href="http://jameszhan.cf/2019/01/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%A4%84%E5%A5%B3%E4%BD%9C/"/>
    <id>http://jameszhan.cf/2019/01/19/个人博客处女作/</id>
    <published>2019-01-19T11:14:40.000Z</published>
    <updated>2019-01-19T15:17:44.478Z</updated>
    
    <content type="html"><![CDATA[<p>千呼万唤始出来，james的个人博客终于开通啦！！！</p><p>首先，感谢师兄陈坤大佬的鼎力相助，本博客是完全按照师兄的<a href="https://kchen.cc/2016/11/12/hexo-instructions/" target="_blank" rel="noopener">教程</a>来搭建的，顺便安利一下师兄的<a href="kchen.cc">个人博客</a>。</p><p>接下来说一下自己的几点想法。</p><h3 id="为什么会想着开通个人博客"><a href="#为什么会想着开通个人博客" class="headerlink" title="为什么会想着开通个人博客"></a>为什么会想着开通个人博客</h3><p>说实话，最初想着开个人博客就是单纯地觉得有博客是一个挺牛逼的事，毕竟大佬们都是一有github，二有个人博客，三有微信公众号。正所谓不想当大佬的渣渣不是优秀工程师嘛。</p><p>之后也在CSDN也写过一些技术文章，写着写着就觉得比较局限。首先吧，CSDN的博客页面不是很美丽，影响阅读体验；其次呢，写博客的时候是在它的在线markdown编辑器下进行，用起来不太顺手，而且图片还有水印，让人难以接受；最最重要的是，CSDN它有广告啊，就很烦这一点，明明是单纯的技术分享，阅读的同时页面右侧还有广告随着你的页面移动，令人抓狂。</p><p>前不久恰逢听闻陈坤师兄用极其简单且免费的方法搭建了自己的个人博客，立马就动心了，还没考完《矩阵论》，心里就开始琢磨自己该整一个什么样的。本来以为个人博客得放在自己的服务器上，需要部署还得更新上传，没想到hexo+github如此简单，年轻人要学的还有很多啊！</p><p>还有markdown,自己用的不多，借着个人博客的开通，希望自己能坚持写作，日后慢慢熟悉。</p><h3 id="打算在博客写什么"><a href="#打算在博客写什么" class="headerlink" title="打算在博客写什么"></a>打算在博客写什么</h3><ul><li><p>技术文章。 研究生期间需要自学的东西很多，很多时候学完了如果没有用到的话很快就会遗忘，等某一天需要的时候又得重新学习，所以记录自己的所学很重要。后期我会将CSDN的文章迁移过来。</p></li><li><p>项目总结。 每一次所做的项目，我想都有必要去好好回顾与总结。一方面是对所做项目所花时间有个交代，另外也是对未来的工作有一定的指导意义。</p></li><li><p>随笔。 目前自己的总结和心里记录都是写在自己的有道云笔记里，以后可以考虑迁移到个人博客中来。其次，对于一些社会热点事件，个人小思绪，我也会写在博客中。</p></li></ul><p>自从詹姆斯加盟湖人，紫金便是我最爱的配色。观感尚可，希望大家能多提建议！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;千呼万唤始出来，james的个人博客终于开通啦！！！&lt;/p&gt;
&lt;p&gt;首先，感谢师兄陈坤大佬的鼎力相助，本博客是完全按照师兄的&lt;a href=&quot;https://kchen.cc/2016/11/12/hexo-instructions/&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://jameszhan.cf/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
