{"meta":{"title":"James's Blog","subtitle":"Winter is coming, Hope is everything!","description":null,"author":"詹姆斯·文","url":"http://jameszhan.cf"},"pages":[{"title":"categories","date":"2019-01-19T08:40:26.000Z","updated":"2019-01-19T08:40:48.213Z","comments":false,"path":"categories/index.html","permalink":"http://jameszhan.cf/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-01-19T08:38:41.000Z","updated":"2019-01-19T08:39:50.309Z","comments":true,"path":"tags/index.html","permalink":"http://jameszhan.cf/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java web架构介绍","slug":"Java-web架构介绍","date":"2019-01-21T13:40:57.000Z","updated":"2019-01-21T14:16:14.097Z","comments":true,"path":"2019/01/21/Java-web架构介绍/","link":"","permalink":"http://jameszhan.cf/2019/01/21/Java-web架构介绍/","excerpt":"","text":"常规的J2EE三层架构 Alibaba提倡的分层结构 Web 层主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。 Service 层相对具体的业务逻辑服务层。 Manager 层通用业务处理层，它有如下特征： 1） 对第三方平台封装的层，预处理返回结果及转化异常信息； 2） 对 Service 层通用能力的下沉，如缓存方案、中间件通用处理； 3） 与 DAO 层交互，对多个 DAO 的组合复用。 DAO 层数据访问层，与底层 MySQL、Oracle、Hbase 等进行数据交互。 开放接口层可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；进行网关安全控制、流量控制等。 终端显示层各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。 外部接口或第三方平台包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。 MVC的结构 SpringMVC的结构及工作原理 工作流程详解 客户端的所有请求都交给前端控制器DispatcherServlet来处理，它会负责调用系统的其他模块来真正处理用户的请求。 DispatcherServlet收到请求后，将根据请求的信息（包括URL、HTTP协议方法、请求头、请求参数、Cookie等）以及HandlerMapping的配置找到处理该请求的Handler（任何一个对象都可以作为请求的Handler）。 在这个地方Spring会通过HandlerAdapter对该处理进行封装。 HandlerAdapter是一个适配器，它用统一的接口对各种Handler中的方法进行调用。 Handler完成对用户请求的处理后，会返回一个ModelAndView对象给DispatcherServlet，ModelAndView顾名思义，包含了数据模型以及相应的视图的信息。 ModelAndView的视图是逻辑视图，DispatcherServlet还要借助ViewResolver完成从逻辑视图到真实视图对象的解析工作。 当得到真正的视图对象后，DispatcherServlet会利用视图对象对模型数据进行渲染。 客户端得到响应，可能是一个普通的HTML页面，也可以是XML或JSON字符串，还可以是一张图片或者一个PDF文件。 组件及其作用 前端控制器 (DispatcherServlet)接收请求，响应结果，相当于转发器，中央处理器。负责调用系统的其他模块来真正处理用户的请求。 有了DispatcherServlet减少了其他组件之间的耦合度 处理器映射器 (HandlerMapping)作用：根据请求的 url 查找 Handler 处理器 (Handler)注意：编写 Handler 时按照 HandlerAdapter 的要求去做，这样适配器才可以去正确执行 Handler处理器适配器 (HandlerAdapter)作用：按照特定规则（HandlerAdapter要求的规则）执行Handler。 视图解析器 (ViewResolver)作用：进行视图解析，根据逻辑视图解析成真正的视图 (View) 视图 (View)View 是一个接口实现类支持不同的 View 类型（jsp,pdf等等） 进行SpringMVC开发时，程序员只需编写处理器和视图。","categories":[{"name":"后端技术","slug":"后端技术","permalink":"http://jameszhan.cf/categories/后端技术/"}],"tags":[{"name":"java","slug":"java","permalink":"http://jameszhan.cf/tags/java/"},{"name":"web","slug":"web","permalink":"http://jameszhan.cf/tags/web/"}]},{"title":"Markdown学习笔记","slug":"Markdown学习笔记","date":"2019-01-21T03:43:51.000Z","updated":"2019-01-21T13:27:43.577Z","comments":true,"path":"2019/01/21/Markdown学习笔记/","link":"","permalink":"http://jameszhan.cf/2019/01/21/Markdown学习笔记/","excerpt":"","text":"今天大概学习了一下Markdown的语法，感觉也不是那么难，用起来都比较方便。作为一门编辑类工具，相信是越用越熟，以后多多练习，必能熟练掌握。 那么就先简单介绍一些常用的语法，之后有需求再去更新。 标题标题有以下六种 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 文字格式强调**这是文字粗体格式** *这是文字斜体格式* &lt;del&gt;在文字上添加删除线 或 ~~在文字上添加删除线~~ `在文字下增加底纹` 这是文字粗体格式 这是文字斜体格式 在文字上添加删除线或在文字上添加删除线 在文字下增加底纹 自定义字体、字号和颜色&lt;font color=#0099ff size=6 face=&quot;黑体&quot;&gt;颜色，字号，字体&lt;/font&gt; 颜色，字号，字体 链接[文本内容]（链接地址） 百度一下 图片原始版此种方式无法改变图片的大小 ![图片的描述](图片的链接地址) 最爱的詹姆斯 升级版此种方式可自定义图片大小 &lt;img src=&quot;./xxx.png&quot; width = &quot;300&quot; height = &quot;200&quot; alt=&quot;图片名称&quot;/&gt; 如果需要居中的话只要在语句外面包围div标签即可 &lt;div align=&quot;center&quot;&gt; ... &lt;/div&gt; 引用在文本内容之前加上 &gt;（大于号），即可将文本变成引用文本 &gt;这是引用部分 这是引用部分 代码框前面用到了很多代码框，即每个大框都是代码框。有两种办法：1.一对“上三点”包裹代码 2.代码前加四个空格（一个tab键）。两种语法的显示在不同编辑器下可能会有些许区别，前者会有标号。 123public void test()&#123; System.out.println(&quot;这就是代码框&quot;)&#125; public void test(){ System.out.println(&quot;这就是代码框&quot;) } 水平分割线前面也用到了许多分割线，三个小短线即可表示。 --- 就是这小三只 列表列表项目标记通常放在最左边，项目标记后面要接一个字符的空格 无序列表使用星号、加号或是减号作为列表标记 - 第一 - 第二 - 第三 第一 第二 第三 有序列表使用数字接着一个英文句点 1. Red 2. Green 3. Blue Red Green Blue 待办列表表示列表是否勾选状态（注意：[ ] 前后都要有空格） - [ ] 不勾选 - [x] 勾选 不勾选 勾选","categories":[{"name":"语言语法","slug":"语言语法","permalink":"http://jameszhan.cf/categories/语言语法/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://jameszhan.cf/tags/Markdown/"}]},{"title":"个人博客处女作","slug":"个人博客处女作","date":"2019-01-19T11:14:40.000Z","updated":"2019-01-19T15:17:44.478Z","comments":true,"path":"2019/01/19/个人博客处女作/","link":"","permalink":"http://jameszhan.cf/2019/01/19/个人博客处女作/","excerpt":"","text":"千呼万唤始出来，james的个人博客终于开通啦！！！ 首先，感谢师兄陈坤大佬的鼎力相助，本博客是完全按照师兄的教程来搭建的，顺便安利一下师兄的个人博客。 接下来说一下自己的几点想法。 为什么会想着开通个人博客说实话，最初想着开个人博客就是单纯地觉得有博客是一个挺牛逼的事，毕竟大佬们都是一有github，二有个人博客，三有微信公众号。正所谓不想当大佬的渣渣不是优秀工程师嘛。 之后也在CSDN也写过一些技术文章，写着写着就觉得比较局限。首先吧，CSDN的博客页面不是很美丽，影响阅读体验；其次呢，写博客的时候是在它的在线markdown编辑器下进行，用起来不太顺手，而且图片还有水印，让人难以接受；最最重要的是，CSDN它有广告啊，就很烦这一点，明明是单纯的技术分享，阅读的同时页面右侧还有广告随着你的页面移动，令人抓狂。 前不久恰逢听闻陈坤师兄用极其简单且免费的方法搭建了自己的个人博客，立马就动心了，还没考完《矩阵论》，心里就开始琢磨自己该整一个什么样的。本来以为个人博客得放在自己的服务器上，需要部署还得更新上传，没想到hexo+github如此简单，年轻人要学的还有很多啊！ 还有markdown,自己用的不多，借着个人博客的开通，希望自己能坚持写作，日后慢慢熟悉。 打算在博客写什么 技术文章。 研究生期间需要自学的东西很多，很多时候学完了如果没有用到的话很快就会遗忘，等某一天需要的时候又得重新学习，所以记录自己的所学很重要。后期我会将CSDN的文章迁移过来。 项目总结。 每一次所做的项目，我想都有必要去好好回顾与总结。一方面是对所做项目所花时间有个交代，另外也是对未来的工作有一定的指导意义。 随笔。 目前自己的总结和心里记录都是写在自己的有道云笔记里，以后可以考虑迁移到个人博客中来。其次，对于一些社会热点事件，个人小思绪，我也会写在博客中。 自从詹姆斯加盟湖人，紫金便是我最爱的配色。观感尚可，希望大家能多提建议！","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://jameszhan.cf/tags/随笔/"}]}]}